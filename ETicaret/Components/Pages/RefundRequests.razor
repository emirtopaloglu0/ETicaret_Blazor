@page "/refund-requests"
@page "/refund-requests/{encodedId}"
@rendermode InteractiveServer
@attribute [StreamRendering]

<AuthorizeView Roles="@UserRoleEnums.ShopUser">
    <Authorized>
        <div class="container my-5">
            <h3 class="mb-4 text-primary fw-bold">
                <i class="bi bi-arrow-counterclockwise me-2"></i> İade Talepleri
            </h3>

            @if (orders == null || orders.Count == 0)
            {
                <div class="alert alert-info text-center shadow-sm rounded-3">
                    <i class="bi bi-info-circle"></i> Şu anda bekleyen iade talebi bulunmamaktadır.
                </div>
            }
            else
            {
                <div class="row g-4">
                    @foreach (var order in orders)
                    {
                        <div class="col-md-6 col-lg-4">
                            <div class="card shadow-sm border-0 rounded-4 h-100">
                                <div class="card-body d-flex flex-column">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h5 class="card-title mb-0 text-secondary fw-semibold">
                                            Sipariş #@order.Id
                                        </h5>
                                        <span class="badge bg-warning text-dark">
                                            <i class="bi bi-clock"></i> Bekliyor
                                        </span>
                                    </div>

                                    <p class="card-text mb-2">
                                        <i class="bi bi-calendar3"></i>
                                        <strong>Tarih:</strong> @order.OrderDate.ToString("dd MMM yyyy")
                                    </p>

                                    <p class="card-text mb-2">
                                        <i class="bi bi-currency-dollar"></i>
                                        <strong>Tutar:</strong> @order.TotalAmount.ToString("C")
                                    </p>

                                    
                                    <div class="mt-auto d-flex justify-content-between">
                                        <button class="btn btn-success w-100 me-2"
                                                @onclick="() => ConfirmRefund(order.Id, OrderStatus.IadeOnaylandı)">
                                            <i class="bi bi-check-circle"></i> Onayla
                                        </button>
                                        <button class="btn btn-outline-danger w-100"
                                                @onclick="() => ConfirmRefund(order.Id, OrderStatus.IadeReddedildi)">
                                            <i class="bi bi-x-circle"></i> Reddet
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="text-center my-5">
            <div class="alert alert-danger shadow-sm rounded-3">
                <i class="bi bi-lock-fill"></i> Bu sayfayı görüntüleme yetkiniz bulunmamaktadır.
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public string encodedId { get; set; }
    int shopId;

    List<GetOrderViewModel> orders = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            shopId = MaskService.Decode(encodedId);
            ApiSettings.shopId = shopId;

            orders = await RequestManager.GetAsync<List<GetOrderViewModel>>(ApiSettings.GetRefundRequestOrders);
            StateHasChanged();
        }
    }

    async Task ConfirmRefund(int orderId, string status)
    {
        ApiSettings.orderId = orderId;
        await RequestManager.PutAsync<string, object>(ApiSettings.UpdateOrderStatus, status);

        // UI'yı güncellemek için ilgili siparişi listeden çıkar
        var order = orders.FirstOrDefault(o => o.Id == orderId);
        if (order != null)
        {
            orders.Remove(order);
        }

        StateHasChanged();
    }
}
