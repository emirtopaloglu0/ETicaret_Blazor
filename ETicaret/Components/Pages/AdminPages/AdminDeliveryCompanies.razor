@page "/admin-kargo-firmalari"
@using ETicaret_UI.ViewModals
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Admin Delivery Company Panel</PageTitle>

<AuthorizeView Roles="admin">
    <Authorized>
        <div class="container mt-4">

            <BlazoredToasts Position="ToastPosition.BottomRight"
                            Timeout="10"
                            ShowCloseButton="@true"
                            MaxToastCount="3"
                            IconType="IconType.FontAwesome"
                            SuccessClass="success-toast-override"
                            SuccessIcon="fa fa-thumbs-up"
                            ErrorIcon="fa fa-bug" />

            <!-- Başlık ve Buton -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2 class="fw-bold">🚚 Kargo Şirketleri</h2>
                <button class="btn btn-success shadow-sm" @onclick="ShowAddModal">
                    <i class="fa fa-plus me-2"></i>Yeni Kargo Şirketi Ekle
                </button>
            </div>

            <!-- Tablo -->
            <div class="table-responsive shadow rounded">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-dark">
                        <tr>
                            <th>Şirket Adı</th>
                            <th class="text-center" style="width:180px;">İşlemler</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in pagedCompanies)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td class="text-center">
                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => EditCompany(item)">
                                        <i class="bi bi-pencil"></i> Düzenle
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ShowDeleteModal(item)">
                                        <i class="bi bi-trash"></i> Sil
                                    </button>
                                </td>
                            </tr>
                        }
                        @if (!pagedCompanies.Any())
                        {
                            <tr>
                                <td colspan="2" class="text-center text-muted">Kayıt bulunamadı.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <nav class="mt-4">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="PreviousPage">Önceki</button>
                    </li>
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        int pageNo = i;
                        <li class="page-item @(currentPage == i ? "active" : "")">
                            <button class="page-link" @onclick="() => GoToPage(pageNo)">@i</button>
                        </li>
                    }
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="NextPage">Sonraki</button>
                    </li>
                </ul>
            </nav>
        </div>

        <!-- Add / Edit Modal -->
        @if (showEditModal && selectedCompany != null)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content shadow-lg border-0 rounded-3">
                        <div class="modal-header bg-primary text-white">
                            <h5 class="modal-title">@((isAddMode ? "Yeni Kargo Şirketi Ekle" : "Kargo Şirketini Düzenle"))</h5>
                            <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <label class="form-label">Şirket Adı</label>
                                <input class="form-control" @bind="selectedCompany.Name" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary" @onclick="CloseEditModal">İptal</button>
                            <button class="btn btn-primary" @onclick="SaveEditCompany">Kaydet</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Delete Modal -->
        @if (showDeleteModal)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content shadow-lg border-0 rounded-3">
                        <div class="modal-header bg-danger text-white">
                            <h5 class="modal-title">Silme Onayı</h5>
                            <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                        </div>
                        <div class="modal-body">
                            <p>Seçili kargo şirketini silmek istediğinizden emin misiniz?</p>
                            <strong>@selectedCompany?.Name</strong>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary" @onclick="CloseDeleteModal">İptal</button>
                            <button class="btn btn-danger" @onclick="DeleteCompany">Sil</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <ETicaret_UI.Components.Pages.AuthPages.AccessDenied />
    </NotAuthorized>
</AuthorizeView>

@code {
    List<DeliveryCompanyViewModel> companies = new();
    List<DeliveryCompanyViewModel> pagedCompanies => companies.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();

    private bool showDeleteModal = false;
    private bool showEditModal = false;
    private bool isAddMode = false;
    private DeliveryCompanyViewModel? selectedCompany;

    // Pagination
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages => (int)Math.Ceiling((double)companies.Count / pageSize);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ReadData();
        }
    }

    async Task ReadData()
    {
        companies.Clear();
        var response = await RequestManager.GetAsync<List<JsonElement>>(ApiSettings.GetCompanies);
        foreach (var item in response)
        {
            companies.Add(new DeliveryCompanyViewModel
            {
                Id = item.GetProperty("id").GetInt32(),
                Name = item.GetProperty("name").GetString()
            });
        }
        currentPage = 1; // liste yenilenince sayfayı başa al
        StateHasChanged();
    }

    private void ShowAddModal()
    {
        selectedCompany = new DeliveryCompanyViewModel();
        isAddMode = true;
        showEditModal = true;
    }

    private void EditCompany(DeliveryCompanyViewModel company)
    {
        selectedCompany = new DeliveryCompanyViewModel
        {
            Id = company.Id,
            Name = company.Name
        };
        isAddMode = false;
        showEditModal = true;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        selectedCompany = null;
    }

    private async Task SaveEditCompany()
    {
        try
        {
            if (selectedCompany == null) return;

            var payload = selectedCompany.Name;

            if (isAddMode)
            {
                await RequestManager.PostAsync<string, string>(ApiSettings.AddCompany, payload);
            }
            else
            {
                ApiSettings.companyId = selectedCompany.Id;
                await RequestManager.PutAsync<string, object>(ApiSettings.UpdateCompany, payload);
                ApiSettings.companyId = 0;
            }
            ToastService.ShowSuccess("İşlem Başarılı");
            showEditModal = false;
            await ReadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void ShowDeleteModal(DeliveryCompanyViewModel company)
    {
        selectedCompany = company;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        selectedCompany = null;
    }

    private async Task DeleteCompany()
    {
        try
        {
            if (selectedCompany == null) return;

            ApiSettings.companyId = selectedCompany.Id;
            await RequestManager.DeleteAsync(ApiSettings.DeleteCompany);
            ApiSettings.companyId = 0;
            ToastService.ShowSuccess("Silme Başarılı");
            showDeleteModal = false;
            await ReadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
            currentPage++;
    }

    private void GoToPage(int page)
    {
        currentPage = page;
    }
}
