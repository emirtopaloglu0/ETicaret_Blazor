@page "/magaza"
@page "/magaza/{protectedShopId}"
@using ETicaret_UI.Services
@using ETicaret_UI.ViewModals
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Mağaza</PageTitle>
<div class="container my-4">
    <BlazoredToasts Position="ToastPosition.BottomRight"
                    Timeout="10"
                    ShowCloseButton="@true"
                    MaxToastCount="3"
                    IconType="IconType.FontAwesome"
                    SuccessClass="success-toast-override"
                    SuccessIcon="fa fa-thumbs-up"
                    ErrorIcon="fa fa-bug" />


    <h2 class="mb-4 text-center fw-bold">🛒 @shop.Name Mağazasının Ürünleri</h2>
    <h4 class="mb-4 text-center text-muted">🛒 @shop.Description </h4>

    @if (canManageProducts)
    {
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div class="d-flex align-items-center gap-3">
                <h5 class="fw-bold">Ürün Listesi</h5>
                <button class="btn btn-outline-secondary btn-sm" @onclick="OpenEditDescriptionModal">
                    <i class="bi bi-pencil-square"></i> Mağaza Açıklamasını Düzenle
                </button>
            </div>

            <button class="btn btn-success btn-sm" @onclick="OpenAddModal">
                <i class="bi bi-plus-circle"></i> Yeni Ürün
            </button>
        </div>
    }
    @if (products?.Any() == true)
    {
        <div class="row g-4">
            @foreach (var item in pagedProducts)
            {
                <div class="col-lg-3 col-md-4 col-sm-6">
                    <div class="card h-100 shadow-lg border-0 product-card">
                        <a href="urun-detay/@MaskService.Encode(item.Id)" class="text-decoration-none text-dark">
                            <img src="@(!string.IsNullOrEmpty(item.ImageUrl) ? item.ImageUrl : "https://via.placeholder.com/300x200?text=Ürün")"
                                 class="card-img-top rounded-top" alt="@item.Name"
                                 style="height:230px; object-fit:cover;" />
                        </a>

                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title fw-bold text-truncate">@item.Name</h5>
                            <p class="card-text text-muted small mb-2">@item.Description</p>

                            <div class="mt-auto">
                                <p class="fw-bold text-success mb-1">@item.Price.ToString("C")</p>
                                <p class="text-secondary small mb-2">Stok: @item.Stock</p>

                                @if (item.Stock <= 0)
                                {
                                    <p class="text-danger small">Stok Kalmamıştır</p>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-primary w-100 mb-2"
                                            @onclick="() => AddToCart(item)">
                                        <i class="bi bi-cart-plus"></i> Sepete Ekle
                                    </button>
                                }

                                <a href="urun-detay/@MaskService.Encode(item.Id)"
                                   class="btn btn-sm btn-outline-secondary w-100 mb-2">
                                    <i class="bi bi-box-seam"></i> Ürün Detayları
                                </a>

                                @if (canManageProducts)
                                {
                                    <div class="d-flex justify-content-between">
                                        <button class="btn btn-sm btn-secondary flex-fill me-1"
                                                @onclick="() => OpenEditModal(item)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger flex-fill ms-1"
                                                @onclick="() => OpenDeleteModal(item)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info text-center py-4">Henüz ürün eklenmemiş.</div>
    }

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center mt-4">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Önceki</button>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                int pageSize = i;
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(pageSize)">@i</button>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Sonraki</button>
            </li>
        </ul>
    </nav>
</div>

<!-- Modal -->
<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="background: rgba(0,0,0,.5);">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@modalTitle</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                @if (modalMode == "delete")
                {
                    <p><strong>@selectedProduct?.Name</strong> adlı ürünü silmek istediğinizden emin misiniz?</p>
                }
                else
                {
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Ürün Adı</label>
                            <input class="form-control" @bind="productForm.Name" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Kategori</label>
                            <select class="form-select" @bind="productForm.CategoryId"
                                    @bind:after="() => ParentCategoryChanged(productForm.CategoryId)">
                                <option value=0>--Boş--</option>
                                @foreach (var category in categories)
                                {
                                    <option value=@category.Id>@category.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Alt Kategoriler</label>
                            <select class="form-select" @bind="productForm.SubCategoryId">
                                <option value=0>--Boş--</option>
                                @foreach (var subCategory in subCategories)
                                {
                                    <option value=@subCategory.Id>@subCategory.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-12">
                            <label class="form-label">Açıklama</label>
                            <textarea class="form-control" @bind="productForm.Description">-</textarea>
                            @if (modalMode != "add")
                            {
                                <button class="btn btn-outline-info mt-2" @onclick="() => GenerateDesc(productForm.Id)">Açıklama Oluştur</button>
                            }

                            @if (isPromptLoading)
                            {
                                <div class="spinner-border text-primary" role="status"></div>
                            }
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Stok</label>
                            <input type="number" class="form-control" @bind="productForm.Stock" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Fiyat</label>
                            <input type="number" step="0.01" class="form-control" @bind="productForm.Price" />
                        </div>

                        <div class="col-md-12">
                            <label class="form-label">Vitrin Resmini Seçin</label>

                            @* Dosya Yükleme *@
                            <InputFile OnChange="HandleFileSelected" />


                            @* Var olan dosyalardan seç *@
                            <select class="form-select mt-2" @bind="productForm.ImageUrl">
                                <option value="">-- Mevcut dosyalardan seç --</option>
                                @foreach (var file in availableImages)
                                {
                                    <option value="@file">@file</option>
                                }
                            </select>

                            @if (!string.IsNullOrEmpty(productForm.ImageUrl))
                            {
                                <div class="mt-3">
                                    <img src="@productForm.ImageUrl" alt="Ürün resmi"
                                         class="img-thumbnail shadow-sm" style="max-height:150px;" />
                                </div>
                            }
                        </div>
                        <hr />
                        <div class="col-md-12">
                            <label class="form-label">Diğer Resimleri Seçin</label>

                            <!-- Çoklu dosya yükleme -->
                            <InputFile OnChange="HandleMultipleFilesSelected" multiple />

                            <hr />

                            <!-- Mevcut dosyalardan birden fazla seç -->
                            <select class="form-select mt-2" multiple @onchange="HandleSelectedImages">
                                @foreach (var file in availableImages)
                                {
                                    <option value="@file">@file</option>
                                }
                            </select>

                            @if (productForm.OtherImages?.Count > 0)
                            {
                                <div class="d-flex flex-wrap mt-3 gap-2">
                                    @foreach (var img in productForm.OtherImages)
                                    {
                                        <img src="@img" class="img-thumbnail shadow-sm" style="max-height:100px;" />
                                    }
                                </div>
                            }
                        </div>

                    </div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseModal">Kapat</button>
                @if (modalMode == "add")
                {
                    <button class="btn btn-success" @onclick="SaveProduct">Kaydet</button>
                }
                else if (modalMode == "edit")
                {
                    <button class="btn btn-warning" @onclick="UpdateProduct">Güncelle</button>
                }
                else if (modalMode == "delete")
                {
                    <button class="btn btn-danger" @onclick="DeleteProduct">Sil</button>
                }
            </div>
        </div>
    </div>
</div>

<!-- Mağaza Açıklaması Düzenleme Modal -->
<div class="modal fade @(showDescModal ? "show d-block" : "")" tabindex="-1" style="background: rgba(0,0,0,.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Mağaza Açıklamasını Düzenle</h5>
                <button type="button" class="btn-close" @onclick="CloseDescModal"></button>
            </div>
            <div class="modal-body">
                <label class="form-label">Açıklama</label>
                <textarea class="form-control" rows="5" @bind="shop.Description"></textarea>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseDescModal">Kapat</button>
                <button class="btn btn-primary" @onclick="UpdateShopDescription">Kaydet</button>
            </div>
        </div>
    </div>
</div>


<style>
    .product-card {
        transition: transform 0.25s ease, box-shadow 0.25s ease;
        border-radius: 1rem;
    }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.15);
        }

    .card-title {
        font-size: 1.05rem;
    }

    .card-text {
        height: 45px;
        overflow: hidden;
        text-overflow: ellipsis;
    }

</style>

@code {
    [Parameter] public string protectedShopId { get; set; }

    int shopId;
    List<ProductViewModel>? products = new();
    List<string> availableImages = new();
    bool canManageProducts = false;

    // Modal kontrolü
    bool showModal = false;
    string modalMode = "";
    string modalTitle = "";
    bool showDescModal = false;
    ProductViewModel? selectedProduct;
    ProductViewModel? productForm = new();
    ShopUserViewModal? shopUser = new();
    LoggedUserViewModel? user = new();
    List<CategoryViewModel>? categories = new();
    List<ProductSubCategoryViewModal>? subCategories = new();
    ShopViewModal? shop = new();

    int currentPage = 1;
    int pageSize = 8; // sayfa başına ürün
    int totalPages => (int)Math.Ceiling((decimal)(products?.Count ?? 0) / pageSize);

    bool isPromptLoading = false;

    IEnumerable<ProductViewModel> pagedProducts =>
        products.Skip((currentPage - 1) * pageSize).Take(pageSize);


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            shopId = MaskService.Decode(protectedShopId);
            user = await RequestManager.GetAsync<LoggedUserViewModel>(ApiSettings.GetCurrentUser);
            if (user != null)
            {
                ApiSettings.userId = user.Id.ToString();

                shopUser = await RequestManager.GetAsync<ShopUserViewModal>(ApiSettings.GetShopByUserId);
                ApiSettings.userId = "";

                if (shopUser != null && (shopUser.ShopId == Convert.ToInt32(shopId) && shopUser.UserId == user.Id))
                {
                    canManageProducts = true;
                }
                else
                {
                    canManageProducts = false;
                }
            }

            ApiSettings.shopId = shopId;

            shop = await RequestManager.GetAsync<ShopViewModal>(ApiSettings.GetShopById);
            products = await RequestManager.GetAsync<List<ProductViewModel>>(ApiSettings.GetProductsByShopId);
            ApiSettings.shopId = 0;
            categories = await RequestManager.GetAsync<List<CategoryViewModel>>(ApiSettings.GetCategories);
            subCategories = await RequestManager.GetAsync<List<ProductSubCategoryViewModal>>(ApiSettings.GetSubCategories);


            var http = new HttpClient { BaseAddress = new Uri(navigationManager.BaseUri) };
            availableImages = await http.GetFromJsonAsync<List<string>>("uploads/list") ?? new();
            StateHasChanged();
        }
    }

    void OpenAddModal()
    {
        modalMode = "add";
        modalTitle = "Yeni Ürün Ekle";
        productForm = new ProductViewModel();
        showModal = true;
    }

    async Task OpenEditModal(ProductViewModel product)
    {
        modalMode = "edit";
        modalTitle = "Ürün Güncelle";
        selectedProduct = product;
        productForm = new ProductViewModel
        {
            Id = product.Id,
            Name = product.Name,
            Description = product.Description,
            CategoryId = product.CategoryId,
            SubCategoryId = product.SubCategoryId,
            CategoryName = product.CategoryName,
            Stock = product.Stock,
            Price = product.Price,
            ImageUrl = product.ImageUrl
        };
        await ParentCategoryChanged(product.CategoryId);
        ApiSettings.productId = product.Id;
        var images = await RequestManager.GetAsync<List<ProductImageViewModal>>(ApiSettings.GetProductImage);
        ApiSettings.productId = 0;
        foreach (var image in images)
        {
            productForm.OtherImages.Add(image.ImageUrl);
        }
        showModal = true;
    }

    void OpenDeleteModal(ProductViewModel product)
    {
        modalMode = "delete";
        modalTitle = "Ürün Sil";
        selectedProduct = product;
        showModal = true;
    }

    async Task CloseModal()
    {
        showModal = false;
        modalMode = "";
        modalTitle = "";
        ApiSettings.shopId = shopUser.ShopId;
        products = await RequestManager.GetAsync<List<ProductViewModel>>(ApiSettings.GetProductsByShopId);
        StateHasChanged();
    }

    async Task SaveProduct()
    {
        try
        {
            var payload = new
            {
                CategoryId = productForm.CategoryId,
                SubCategoryId = productForm.SubCategoryId,
                ShopId = shopId,
                Name = productForm.Name,
                Description = productForm.Description,
                Stock = productForm.Stock,
                Price = productForm.Price,
                ImageUrl = string.IsNullOrEmpty(productForm.ImageUrl) ? string.Empty : productForm.ImageUrl
            };
            var response = await RequestManager.PostAsync<object, int>(ApiSettings.AddProduct, payload);
            if (response > 0)
            {
                List<ProductImageViewModal> productImageList = new();
                foreach (var img in productForm.OtherImages)
                {
                    productImageList.Add(new ProductImageViewModal
                    {
                        ProductId = response,
                        ImageUrl = img
                    });
                }
                await RequestManager.PostAsync<List<ProductImageViewModal>, string>(ApiSettings.AddProductImage, productImageList);
            }
            ToastService.ShowSuccess("Ürün eklendi");
            await CloseModal();
        }
        catch
        {
            ToastService.ShowError("Beklenmeyen Bir Hata Oluştu");
        }
    }

    async Task UpdateProduct()
    {
        try
        {
            var payload = new
            {
                CategoryId = productForm.CategoryId,
                SubCategoryId = productForm.SubCategoryId,
                ShopId = shopId,
                Name = productForm.Name,
                Description = productForm.Description,
                Stock = productForm.Stock,
                Price = productForm.Price,
                ImageUrl = string.IsNullOrEmpty(productForm.ImageUrl) ? string.Empty : productForm.ImageUrl
            };
            ApiSettings.productId = productForm.Id;
            await RequestManager.PutAsync<object, string>(ApiSettings.UpdateProduct, payload);

            var isImagesAlreadyExist = await RequestManager.GetAsync<bool>(ApiSettings.IsImageAlreadyExist);
            if (!isImagesAlreadyExist)
            {
                List<ProductImageViewModal> productImageList = new();
                foreach (var img in productForm.OtherImages)
                {
                    productImageList.Add(new ProductImageViewModal
                    {
                        ProductId = productForm.Id,
                        ImageUrl = img
                    });
                }
                await RequestManager.PostAsync<List<ProductImageViewModal>, string>(ApiSettings.AddProductImage, productImageList);
            }
            else
            {
                List<ProductImageViewModal> productImageView = new();

                foreach (var item in productForm.OtherImages)
                {
                    productImageView.Add(new ProductImageViewModal
                    {
                        ProductId = productForm.Id,
                        ImageUrl = item
                    });
                }
                await RequestManager.PutAsync<List<ProductImageViewModal>, string>(ApiSettings.UpdateProductImage, productImageView);
            }
            ApiSettings.productId = 0;

            ToastService.ShowSuccess("Ürün güncellendi");
            await CloseModal();
        }
        catch
        {
            ToastService.ShowError("Bekelnmeyen Bir Hata Oluştu");
        }
    }

    async Task DeleteProduct()
    {
        try
        {
            ApiSettings.productId = selectedProduct.Id;
            await RequestManager.DeleteAsync(ApiSettings.DeleteProduct);
            ApiSettings.productId = 0;

            ToastService.ShowSuccess("Ürün silindi");

            await CloseModal();
        }
        catch
        {
            ToastService.ShowError("Beklenmeyen Bir Hata Oluştu");
        }
    }
    void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    void AddToCart(ProductViewModel product)
    {
        CartService.AddToCart(product);
        ToastService.ShowSuccess($"{product.Name} sepete eklendi!");
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var content = new MultipartFormDataContent();
            content.Add(new StreamContent(file.OpenReadStream(10_000_000)), "file", file.Name);

            var http = new HttpClient { BaseAddress = new Uri(navigationManager.BaseUri) };
            var response = await http.PostAsync("upload", content);

            if (response.IsSuccessStatusCode)
            {
                var url = await response.Content.ReadAsStringAsync();
                productForm.ImageUrl = url.Trim('"'); // örn: /uploads/xyz.jpg
            }
        }
    }

    async Task GenerateDesc(int id)
    {
        isPromptLoading = true;
        ApiSettings.productId = id;

        var response = await RequestManager.GetAsync<string>(ApiSettings.GenerateDesc);
        isPromptLoading = false;
        if (string.IsNullOrEmpty(response))
        {
            productForm.Description = "Üretilemedi";
            return;
        }
        productForm.Description = response;
    }

    void OpenEditDescriptionModal()
    {
        showDescModal = true;
    }

    async Task CloseDescModal()
    {
        showDescModal = false;
        // Mağazayı tekrar getir (güncel halini görmek için)
        ApiSettings.shopId = Convert.ToInt32(shopId);
        shop = await RequestManager.GetAsync<ShopViewModal>(ApiSettings.GetShopById);
        ApiSettings.shopId = 0;
        StateHasChanged();
    }

    async Task UpdateShopDescription()
    {
        try
        {
            var payload = new
            {
                Name = shop.Name,
                Description = shop.Description
            };

            ApiSettings.shopId = Convert.ToInt32(shopId);
            var response = await RequestManager.PutAsync<object, bool>(ApiSettings.UpdateShop, payload);
            ApiSettings.shopId = 0;
            if (!response)
            {
                ToastService.ShowError("Beklenmeyen bir hata oluştu, daha sonra tekrar deneyin");
                return;
            }

            ToastService.ShowSuccess("Mağaza açıklaması güncellendi");
            await CloseDescModal();
        }
        catch
        {
            ToastService.ShowError("Açıklama güncellenirken hata oluştu");
        }
    }


    private async Task HandleMultipleFilesSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var content = new MultipartFormDataContent();
            content.Add(new StreamContent(file.OpenReadStream(10_000_000)), "file", file.Name);

            var http = new HttpClient { BaseAddress = new Uri(navigationManager.BaseUri) };
            var response = await http.PostAsync("upload", content);

            if (response.IsSuccessStatusCode)
            {
                var url = await response.Content.ReadAsStringAsync();
                var cleanUrl = url.Trim('"');
                productForm.OtherImages.Add(cleanUrl);
            }
        }

        StateHasChanged();
    }

    private void HandleSelectedImages(ChangeEventArgs e)
    {
        var selectedOptions = ((IEnumerable<string>)e.Value!).ToList();
        productForm.OtherImages = selectedOptions;
    }


    private async Task ParentCategoryChanged(int categoryId)
    {
        ApiSettings.categoryId = categoryId;
        subCategories = await RequestManager.GetAsync<List<ProductSubCategoryViewModal>>(ApiSettings.GetSubCategoriesByCategory);
        ApiSettings.categoryId = 0;
    }


}
