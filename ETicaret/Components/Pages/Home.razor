@page "/"
@using ETicaret_UI.Services
@using ETicaret_UI.ViewModals
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Ana Sayfa</PageTitle>

<div class="container my-4">

    <BlazoredToasts Position="ToastPosition.BottomRight"
                    Timeout="10"
                    ShowCloseButton="@true"
                    MaxToastCount="3"
                    IconType="IconType.FontAwesome"
                    SuccessClass="success-toast-override"
                    SuccessIcon="fa fa-thumbs-up"
                    ErrorIcon="fa fa-bug" />

    <div class="row mb-4 align-items-center">
        <div class="col-md-3 col-sm-12 mb-2">
            <select class="form-select" @bind="selectedCategory">
                <option value="">Tüm Kategoriler</option>
                @foreach (var cat in categories)
                {
                    <option value="@cat">@cat</option>
                }
            </select>
        </div>

        <div class="col-md-3 col-sm-12 mb-2">
            <select class="form-select" @bind="selectedShop">
                <option value="">Tüm Mağazalar</option>
                @foreach (var shop in shops)
                {
                    <option value="@shop">@shop</option>
                }
            </select>
        </div>

        <div class="col-md-4 col-sm-12 mb-2">
            <input type="text" class="form-control" placeholder="Ürün ara..."
                   @bind="searchQuery" @bind:event="oninput" />
        </div>

        <div class="col-md-2 col-sm-12 mb-2 text-end">
            <span class="badge bg-primary fs-6">
                <i class="bi bi-box-seam"></i> Toplam: @filteredProducts.Count()
            </span>
        </div>
    </div>

    <div class="row g-4">
        @foreach (var item in pagedProducts)
        {
            <div class="col-md-3 col-sm-6">
                <div class="card h-100 shadow-sm product-card border-0 rounded-3">
                    <img src="@(!string.IsNullOrEmpty(item.ImageUrl) ? item.ImageUrl : "https://via.placeholder.com/300x200?text=Ürün")"
                         class="card-img-top rounded-top" alt="@item.Name"
                         style="height:200px; object-fit:cover;" />
                    <div class="card-body d-flex flex-column">
                        <h6 class="card-title fw-bold">@item.Name</h6>
                        <p class="card-text text-muted small flex-grow-1">@item.Description</p>

                        <div class="d-flex justify-content-between align-items-center mt-auto">
                            <span class="fw-bold text-success">@item.Price.ToString("C")</span>
                            @if (item.Stock <= 0)
                            {
                                <span class="fw-bold text-danger">Stok Kalmamıştır.</span>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-outline-primary"
                                        @onclick="() => AddToCart(item)">
                                    <i class="bi bi-cart-plus"></i>
                                </button>
                            }
                        </div>

                        <a class="text-secondary small mt-2 text-decoration-none" href="shop/@item.ShopId">
                            <i class="bi bi-shop"></i> @item.ShopName Mağazası
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center mt-4">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Önceki</button>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                int pageSize = i;
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(pageSize)">@i</button>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Sonraki</button>
            </li>
        </ul>
    </nav>
</div>

@code {
    List<ProductViewModel> products = new();
    List<string> categories = new();
    List<string> shops = new();

    string selectedCategory = "";
    string selectedShop = "";
    string searchQuery = "";

    int currentPage = 1;
    int pageSize = 8;
    int totalPages => (int)Math.Ceiling((decimal)(filteredProducts.Count()) / pageSize);

    IEnumerable<ProductViewModel> filteredProducts =>
        products
        .Where(p => string.IsNullOrEmpty(selectedCategory) || p.CategoryName == selectedCategory)
        .Where(p => string.IsNullOrEmpty(selectedShop) || p.ShopName == selectedShop)
        .Where(p => string.IsNullOrEmpty(searchQuery) ||
                    p.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    p.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));

    IEnumerable<ProductViewModel> pagedProducts =>
        filteredProducts.Skip((currentPage - 1) * pageSize).Take(pageSize);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            products = await RequestManager.GetAsync<List<ProductViewModel>>(ApiSettings.Products);
            categories = products.Select(p => p.CategoryName).Distinct().OrderBy(x => x).ToList();
            shops = products.Select(p => p.ShopName).Distinct().OrderBy(x => x).ToList();
            StateHasChanged();
        }
    }

    void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    void AddToCart(ProductViewModel product)
    {
        CartService.AddToCart(product);
        ToastService.ShowSuccess($"{product.Name} sepete eklendi!");
    }
}