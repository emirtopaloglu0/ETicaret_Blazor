@page "/"
@using ETicaret_UI.Services
@using ETicaret_UI.ViewModals
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Ana Sayfa</PageTitle>

<div class="container my-4">

    <!-- Toastlar -->
    <BlazoredToasts Position="ToastPosition.BottomRight"
                    Timeout="10"
                    ShowCloseButton="@true"
                    MaxToastCount="3"
                    IconType="IconType.FontAwesome"
                    SuccessClass="success-toast-override"
                    SuccessIcon="fa fa-thumbs-up"
                    ErrorIcon="fa fa-bug" />

    <!-- 🔽 Kategori & Filtreleme -->
    <div class="row mb-4 align-items-center">
        <div class="col-md-3 col-sm-12 mb-2">
            <select class="form-select" @onchange="OnCategoryChanged">
                <option value="">Tüm Kategoriler</option>
                @foreach (var cat in categories)
                {
                    <option value="@cat.Id">@cat.Name</option>

                    @if (subCategories.Any(sc => sc.CategoryId == cat.Id))
                    {
                        @foreach (var sub in subCategories.Where(sc => sc.CategoryId == cat.Id))
                        {
                            <option value="sub-@sub.Id">-- @sub.Name</option>
                        }
                    }
                }
            </select>
        </div>

        <div class="col-md-3 col-sm-12 mb-2">
            <select class="form-select" @bind="selectedShop">
                <option value="">Tüm Mağazalar</option>
                @foreach (var shop in shops)
                {
                    <option value="@shop">@shop</option>
                }
            </select>
        </div>

        <div class="col-md-4 col-sm-12 mb-2">
            <input type="text" class="form-control" placeholder="Ürün ara..."
                   @bind="searchQuery" @bind:event="oninput" />
        </div>

        <div class="col-md-2 col-sm-12 mb-2 text-end">
            <span class="badge bg-primary fs-6">
                <i class="bi bi-box-seam"></i> Toplam: @filteredProducts.Count()
            </span>
        </div>
    </div>

    <!-- 🔹 Ürünler -->
    <div class="row g-4">
        @foreach (var item in pagedProducts)
        {
            <div class="col-md-3 col-sm-6">
                <div class="card h-100 shadow-sm product-card border-0 rounded-3">
                    <a href="urun-detay/@MaskService.Encode(item.Id)" class="text-decoration-none text-dark">
                        <img src="@(!string.IsNullOrEmpty(item.ImageUrl) ? item.ImageUrl : "https://via.placeholder.com/300x200?text=Ürün")"
                             class="card-img-top rounded-top" alt="@item.Name"
                             style="height:200px; object-fit:cover;" />
                    </a>

                    <div class="card-body d-flex flex-column">
                        <h6 class="card-title fw-bold text-truncate">@item.Name</h6>
                        <p class="card-text text-muted small flex-grow-1">@item.Description</p>

                        <div class="d-flex justify-content-between align-items-center mt-auto">
                            <span class="fw-bold text-success">@item.Price.ToString("C")</span>
                            @if (item.Stock <= 0)
                            {
                                <span class="fw-bold text-danger small">Tükendi</span>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-outline-primary"
                                        @onclick="() => AddToCart(item)">
                                    <i class="bi bi-cart-plus"></i>
                                </button>
                            }
                        </div>

                        <a class="text-secondary small mt-2 text-decoration-none d-block" href="magaza/@MaskService.Encode(@item.ShopId)">
                            <i class="bi bi-shop"></i> @item.ShopName Mağazası
                        </a>

                        <a href="/urun-detay/@MaskService.Encode(item.Id)"
                           class="btn btn-sm btn-outline-dark mt-2 w-100">
                            <i class="bi bi-info-circle"></i> Ürün Detayına Git
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- 🔹 Sayfalama -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center mt-4">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Önceki</button>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                int pageSize = i;
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(pageSize)">@i</button>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Sonraki</button>
            </li>
        </ul>
    </nav>
</div>

<style>
    .product-card {
        transition: transform 0.25s ease, box-shadow 0.25s ease;
        border-radius: 1rem;
    }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.15);
        }

    .card-title {
        font-size: 1.05rem;
    }

    .card-text {
        height: 45px;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>

@code {
    List<ProductViewModel> products = new();
    List<CategoryViewModel> categories = new();
    List<ProductSubCategoryViewModal> subCategories = new();
    List<string> shops = new();

    string selectedCategory = "";
    string selectedShop = "";
    string searchQuery = "";

    int currentPage = 1;
    int pageSize = 8;
    int totalPages => (int)Math.Ceiling((decimal)(filteredProducts.Count()) / pageSize);

    IEnumerable<ProductViewModel> filteredProducts =>
        products
        .Where(p => FilterByCategory(p))
        .Where(p => string.IsNullOrEmpty(selectedShop) || p.ShopName == selectedShop)
        .Where(p => string.IsNullOrEmpty(searchQuery) ||
                    p.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    p.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));

    IEnumerable<ProductViewModel> pagedProducts =>
        filteredProducts.Skip((currentPage - 1) * pageSize).Take(pageSize);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        products = await RequestManager.GetAsync<List<ProductViewModel>>(ApiSettings.Products);
        categories = await RequestManager.GetAsync<List<CategoryViewModel>>(ApiSettings.GetCategories);
        subCategories = await RequestManager.GetAsync<List<ProductSubCategoryViewModal>>(ApiSettings.GetSubCategories);

        shops = products.Select(p => p.ShopName).Distinct().OrderBy(x => x).ToList();

        StateHasChanged();
    }

    void OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategory = e.Value?.ToString() ?? "";
        currentPage = 1;
    }

    bool FilterByCategory(ProductViewModel p)
    {
        if (string.IsNullOrEmpty(selectedCategory))
            return true;

        if (selectedCategory.StartsWith("sub-"))
        {
            var subId = int.Parse(selectedCategory.Replace("sub-", ""));
            return p.SubCategoryId == subId;
        }
        else
        {
            var catId = int.Parse(selectedCategory);
            return p.CategoryId == catId;
        }
    }

    void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    void AddToCart(ProductViewModel product)
    {
        CartService.AddToCart(product);
        ToastService.ShowSuccess($"{product.Name} sepete eklendi!");
    }
}
